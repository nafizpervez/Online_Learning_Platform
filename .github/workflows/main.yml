#Github Action

name: Build and Push Docker Image to Docker Hub

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Build Docker Compose Image
        run: docker-compose build
        # --no-cache --force-rm

  run:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run Docker Compose Image
        run: docker-compose up -d

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - run: pip install fastapi httpx pytest sqlalchemy pydantic psycopg2 uvicorn
      # - uses: actions/checkout@
      - name: Unit Testing
        run: pytest test/test_main.py

  push_into_dockerhub:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: push backend into docker hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: nafizpervez/online_learning_platform:backend

      - name: push frontend into docker hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: nafizpervez/online_learning_platform:frontend

      - name: push postgres into docker hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: nafizpervez/online_learning_platform:postgres

      - name: push pgadmin into docker hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: nafizpervez/online_learning_platform:pgadmin

    pull_and_deploy:
      needs: push_into_dockerhub
      runs-on: ubuntu-latest

        steps:
          - name: checkout code
            uses: actions/checkout@v2
          - name: login into docker hub
            uses: docker/login-action@v1
            with:
              username: ${{ env.DOCKERHUB_USERNAME }}
              password: ${{ env.DOCKERHUB_PASSWORD }}
          - name: set permission for aws private key
            run: |
              echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
              chmod 600 key.pem
          - name: pull docker composer images from docker hub
            run: |
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker pull nafizpervez/online_learning_platform:backend'
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker pull nafizpervez/online_learning_platform:frontend'
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker pull nafizpervez/online_learning_platform:postgres'
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker pull nafizpervez/online_learning_platform:pgadmin'
          - name: stop running compose containers 
            run: |
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker-compose stop || true'

          - name: run new docker compose in the ec2 instance
            run: |
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker-compose up -d --build backend'
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker-compose up -d --build postgres'
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker-compose up -d --build pgadmin'
              ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@13.126.198.61 'sudo docker run -d --name online_learning_platform -p 8080:3000 nafizpervez/online_learning_platform:frontend'